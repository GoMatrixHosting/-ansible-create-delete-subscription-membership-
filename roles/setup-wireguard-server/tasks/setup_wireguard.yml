
- name: Extract wg-ifupdown.tar.gz into /root
  delegate_to: "{{ server_ip }}"
  unarchive:
    src: "{{ role_path }}/repos/wg-ifupdown.tar.gz"
    dest: /root

- name: Install wg-ifupdown module
  delegate_to: "{{ server_ip }}"
  shell:
    cmd: /bin/sh /root/wg-ifupdown/install.sh
    chdir: /root/wg-ifupdown/

- name: Create folder for the wireguard servers config
  delegate_to: "{{ server_ip }}"
  file:
    path: /etc/wireguard/wg0
    state: directory
    mode: '0755'

- name: Create wireguard keys for the server
  delegate_to: "{{ server_ip }}"
  shell: wg genkey | tee /etc/wireguard/wg0/server-private.key | wg pubkey > /etc/wireguard/wg0/server-public.key
  args: 
    creates: /etc/wireguard/wg0/server-private.key

- name: Create wireguard keys for the client
  delegate_to: "{{ server_ip }}"
  shell: wg genkey | tee /etc/wireguard/wg0/client-private.key | wg pubkey > /etc/wireguard/wg0/client-public.key
  args: 
    creates: /etc/wireguard/wg0/client-private.key

- name: Alter permission on the wireguard servers key
  delegate_to: "{{ server_ip }}"
  file:
    path: /etc/wireguard/wg0/server-private.key
    mode: '0600'

- name: Alter permission on the wireguard clients key
  delegate_to: "{{ server_ip }}"
  file:
    path: /etc/wireguard/wg0/client-private.key
    mode: '0600'

- name: Ensure interfaces.d source line exists in interfaces file
  delegate_to: "{{ server_ip }}"
  lineinfile:
    path: /etc/network/interfaces
    line: 'source /etc/network/interfaces.d/*'

- name: Create wireguard interface entry on server
  delegate_to: "{{ server_ip }}"
  blockinfile:
    path: /etc/network/interfaces.d/wg0.conf
    create: yes
    block: |
      auto wg0
      iface wg0 inet static
          wg-private-key /etc/wireguard/wg0/server-private.key
          wg-listen-port 51820
          address 192.168.99.1/24
          wg-autoroute no

- name: Record the public SSH key into a variable
  delegate_to: "{{ server_ip }}"
  shell: cat /etc/wireguard/wg0/client-public.key
  register: client_public_key

- name: Create wireguard config file on server
  delegate_to: "{{ server_ip }}"
  blockinfile:
    path: /etc/wireguard/wg0/config
    create: yes
    block: |
      [Peer]
      PublicKey = {{ client_public_key.stdout }}
      AllowedIPs = 192.168.99.2/32

- name: Enable IP forwarding
  delegate_to: "{{ server_ip }}"
  blockinfile:
    path: /etc/ufw/sysctl.conf
    insertafter: "# Uncomment this to allow this host to route packets between interfaces"
    block: |
      net/ipv4/ip_forward=1
      net/ipv6/conf/default/forwarding=1
      net/ipv6/conf/all/forwarding=1

- name: Setup UFW before rules
  delegate_to: "{{ server_ip }}"
  blockinfile:
    path: /etc/ufw/before.rules
    block: |
      # nat Table rules
      *nat
      :PREROUTING ACCEPT [0:0]
      :POSTROUTING ACCEPT [0:0]
      
      # flush any previous NAT rules
      -F
      
      # Port Forwardings
      -A PREROUTING -i eth0 -p tcp -m multiport --dports 22,25,80,443,587,3478,5349,4443,8448,9000,9100 -j DNAT --to-destination 192.168.99.2
      # 3478/tcp+udp TURN + 5349/tcp+udp TURN-SSL (RFC-5766)
      # 25/tcp and 587/tcp for SMTP
      # 9000/tcp for Synapse metrics + 9100/tcp for Node-Exporter metrics
      # 4443/tcp (Jitsi Harvester fallback)
      # 8448/tcp matrix federation
      -A PREROUTING -i eth0 -p udp -m multiport --dports 3478,5349,10000,49152:49172 -j DNAT --to-destination 192.168.99.2
      # 10000/udp (Jitsi video RTP)
      # 49152-49172/udp (TURN over UDP)
      
      # Forward traffic from wg0 through eth0.
      -A POSTROUTING -s 192.168.99.2/32 -o eth0 -j MASQUERADE
      
      # don't delete the 'COMMIT' line or these nat table rules won't be processed
      COMMIT
  when: plan_size == "normal"

- name: Setup UFW before rules
  delegate_to: "{{ server_ip }}"
  blockinfile:
    path: /etc/ufw/before.rules
    block: |
      # nat Table rules
      *nat
      :PREROUTING ACCEPT [0:0]
      :POSTROUTING ACCEPT [0:0]
      
      # flush any previous NAT rules
      -F
      
      # Port Forwardings
      -A PREROUTING -i eth0 -p tcp -m multiport --dports 22,25,80,443,587,3478,5349,4443,8448,9000,9100,18111,19111,19200,19300,19400,18551,19551,18661,19661,18771,19771 -j DNAT --to-destination 192.168.99.2
      # 3478/tcp+udp TURN + 5349/tcp+udp TURN-SSL (RFC-5766)
      # 25/tcp and 587/tcp for SMTP
      # 9000/tcp for Synapse metrics + 9100/tcp for Node-Exporter metrics
      # 4443/tcp (Jitsi Harvester fallback)
      # 8448/tcp matrix federation
      -A PREROUTING -i eth0 -p udp -m multiport --dports 3478,5349,10000,49152:49172 -j DNAT --to-destination 192.168.99.2
      # 10000/udp (Jitsi video RTP)
      # 49152-49172/udp (TURN over UDP)
      
      # Forward traffic from wg0 through eth0.
      -A POSTROUTING -s 192.168.99.2/32 -o eth0 -j MASQUERADE
      
      # don't delete the 'COMMIT' line or these nat table rules won't be processed
      COMMIT
  when: plan_size == "jumbo"

- name: Reload UFW
  delegate_to: "{{ server_ip }}"
  ufw:
    state: reloaded

- name: Raise the wireguard interface
  command: ifup wg0
  when: bullseye_string in debian_version.stdout

- name: Reboot server to fix wireguard
  delegate_to: "{{ server_ip }}"
  reboot:
    reboot_timeout: 5
  ignore_errors: yes
  when: buster_string in debian_version.stdout
