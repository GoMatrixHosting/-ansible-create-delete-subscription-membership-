
# Script inputs:
# client_first_name, client_last_name, client_email, subscription_id, plan_title 

- name: Include organisation vars of organisation.yml
  include_vars:
    file: '/var/lib/awx/projects/clients/{{ member_id }}/organisation.yml'

- name: Install tower dep
  delegate_to: 127.0.0.1
  pip:
      name: ansible-tower-cli

- name: Create AWX organisation
  delegate_to: 127.0.0.1
  tower_organization:
    name: "{{ member_id }}"
    description: "{{ client_email }} Organisation"
    tower_host: "{{ tower_host }}"
    tower_username: "{{ tower_username }}"
    tower_password: "{{ tower_password }}"
    validate_certs: yes
  register: awxorg

- name: Add AWX user
  delegate_to: 127.0.0.1
  tower_user:
    username: "{{ member_id }}"
    password: "{{ client_password }}"
    email: "{{ client_email }}"
    first_name: "{{ client_first_name }}"
    last_name: "{{ client_last_name }}"
    tower_host: "{{ tower_host }}"
    tower_username: "{{ tower_username }}"
    tower_password: "{{ tower_password }}"
    validate_certs: yes

- name: Add AWX user to organisation
  delegate_to: 127.0.0.1
  tower_role:
    user: "{{ member_id }}"
    organization: "{{ member_id }}"
    role: member
    tower_host: "{{ tower_host }}"
    tower_username: "{{ tower_username }}"
    tower_password: "{{ tower_password }}"
    validate_certs: yes

- name: Add tower inventory
  delegate_to: 127.0.0.1
  tower_inventory:
    name: "{{ member_id }} Inventory"
    description: "{{ client_email }} inventory"
    organization: "{{ member_id }}"
    state: present
    tower_host: "{{ tower_host }}"
    tower_username: "{{ tower_username }}"
    tower_password: "{{ tower_password }}"
    validate_certs: yes

- name: Allow user account to administrate/use this inventory
  delegate_to: 127.0.0.1
  tower_role:
    user: "{{ member_id }}"
    inventory: "{{ member_id }} Inventory"
    role: use
    state: present
    tower_host: "{{ tower_host }}"
    tower_username: "{{ tower_username }}"
    tower_password: "{{ tower_password }}"
    validate_certs: yes

- name: Add dummyvalue.com host to organisations inventory
  delegate_to: 127.0.0.1
  tower_host:
    name: "dummyvalue.com"
    description: "A placeholder host, because ansible needs a host to work on. :)"
    inventory: "{{ member_id }} Inventory"
    state: present
    tower_host: "{{ tower_host }}"
    tower_username: "{{ tower_username }}"
    tower_password: "{{ tower_password }}"
    validate_certs: yes

- name: Add 'testing SSH' credential to users organisation
  delegate_to: 127.0.0.1
  tower_credential:
    name: "{{ member_id }} - ChatOasis testing SSH"
    description: "A testing key for provision/deploy"
    organization: "{{ member_id }}"
    kind: ssh
    ssh_key_data: "{{ lookup('file', '/var/lib/awx/projects/hosting/matrixtesting_ed25519') }}"
    state: present
    tower_host: "{{ tower_host }}"
    tower_username: "{{ tower_username }}"
    tower_password: "{{ tower_password }}"
    validate_certs: yes

# ^ SSH key loaded into the towers volume manually for now.

- name: Add 'Ansible Provision Server' project to users organisation
  delegate_to: 127.0.0.1
  tower_project:
    name: "{{ member_id }} - Ansible Provision Server"
    description: "Creates digitalocean droplet and space, performs initial setup, adds relevant playbooks to users account."
    organization: "{{ member_id }}"
    scm_type: git
    scm_url: "https://gitlab.com/ChatOasis/ansible-provision-server.git"
    scm_delete_on_update: yes
    scm_update_on_launch: yes
    state: present
    tower_host: "{{ tower_host }}"
    tower_username: "{{ tower_username }}"
    tower_password: "{{ tower_password }}"
    validate_certs: yes

- name: Add 'Spantaleev's Deploy' project to users organisation
  delegate_to: 127.0.0.1
  tower_project:
    name: "{{ member_id }} - Matrix Docker Ansible Deploy"
    description: "Creating and updating a Matrix service on an already provisioned server."
    organization: "{{ member_id }}"
    scm_type: git
    scm_url: "https://gitlab.com/ChatOasis/chatoasis-matrix-docker-ansible-deploy.git"
    scm_delete_on_update: yes
    scm_update_on_launch: yes
    state: present
    tower_host: "{{ tower_host }}"
    tower_username: "{{ tower_username }}"
    tower_password: "{{ tower_password }}"
    validate_certs: yes

- name: Add 'AWX Playbooks' project to users organisation
  delegate_to: 127.0.0.1
  tower_project:
    name: "{{ member_id }} - AWX Playbooks"
    description: "AWX playbooks for management of an already deployed server."
    organization: "{{ member_id }}"
    scm_type: git
    scm_url: "https://gitlab.com/ChatOasis/chatoasis-awx-playbooks.git"
    scm_delete_on_update: yes
    scm_update_on_launch: yes
    state: present
    tower_host: "{{ tower_host }}"
    tower_username: "{{ tower_username }}"
    tower_password: "{{ tower_password }}"
    validate_certs: yes

- name: Update 'Ansible Provision Server' project
  delegate_to: 127.0.0.1
  awx.awx.tower_project_update:
    project: "{{ member_id }} - Ansible Provision Server"
    timeout: 300
    tower_host: "{{ tower_host }}"
    tower_username: "{{ tower_username }}"
    tower_password: "{{ tower_password }}"
    validate_certs: yes

- name: Update 'Spantaleev's Deploy' project
  delegate_to: 127.0.0.1
  awx.awx.tower_project_update:
    project: "{{ member_id }} - Matrix Docker Ansible Deploy"
    timeout: 300
    tower_host: "{{ tower_host }}"
    tower_username: "{{ tower_username }}"
    tower_password: "{{ tower_password }}"
    validate_certs: yes

- name: Update 'AWX Playbooks' project
  delegate_to: 127.0.0.1
  awx.awx.tower_project_update:
    project: "{{ member_id }} - AWX Playbooks"
    timeout: 300
    tower_host: "{{ tower_host }}"
    tower_username: "{{ tower_username }}"
    tower_password: "{{ tower_password }}"
    validate_certs: yes

- name: Create 'Provision a New Server' job template
  delegate_to: 127.0.0.1
  tower_job_template:
    name: "{{ subscription_id_final }} - 00 - Provision a New Server"
    description: "Creates digitalocean droplet and space, performs initial setup, adds relevant playbooks to users account."
    extra_vars_path: '/var/lib/awx/projects/clients/{{ member_id }}/{{ subscription_id_final }}/extra_vars.yml'
    job_type: run
    inventory: "{{ member_id }} Inventory"
    project: "{{ member_id }} - Ansible Provision Server"
    playbook: setup.yml
    credential: "{{ member_id }} - ChatOasis testing SSH"
    survey_enabled: true
    survey_spec: "{{ lookup('file', './roles/create-awx-account/surveys/provision_survey_mp.json') }}"
    state: present
    verbosity: 1
    job_tags: imposter-check, digitalocean-droplet
    skip_tags: digitalocean-space
    tower_host: "{{ tower_host }}"
    tower_username: "{{ tower_username }}"
    tower_password: "{{ tower_password }}"
    validate_certs: yes
  when: byo_bool|bool == false

- name: Create 'Provision a New Server' job template
  delegate_to: 127.0.0.1
  tower_job_template:
    name: "{{ subscription_id_final }} - 00 - Provision a New Server"
    description: "Creates digitalocean droplet and space, performs initial setup, adds relevant playbooks to users account."
    extra_vars_path: '/var/lib/awx/projects/clients/{{ member_id }}/{{ subscription_id_final }}/extra_vars.yml'
    job_type: run
    inventory: "{{ member_id }} Inventory"
    project: "{{ member_id }} - Ansible Provision Server"
    playbook: setup.yml
    credential: "{{ member_id }} - ChatOasis testing SSH"
    survey_enabled: true
    survey_spec: "{{ lookup('file', './roles/create-awx-account/surveys/provision_survey_byo.json') }}"
    state: present
    verbosity: 1
    job_tags: imposter-check, byo-server
    skip_tags: digitalocean-space, digitalocean-droplet
    tower_host: "{{ tower_host }}"
    tower_username: "{{ tower_username }}"
    tower_password: "{{ tower_password }}"
    validate_certs: yes
  when: byo_bool|bool == true

- name: Allow user account to use 'Provision a New Server job template
  delegate_to: 127.0.0.1
  tower_role:
    user: "{{ member_id }}"
    job_template: "{{ subscription_id_final }} - 00 - Provision a New Server"
    role: execute
    state: present
    tower_host: "{{ tower_host }}"
    tower_username: "{{ tower_username }}"
    tower_password: "{{ tower_password }}"
    validate_certs: yes


